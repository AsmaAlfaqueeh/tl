from flask import Flask, render_template, request
import torch
import torch.nn as nn
from torchvision import models, transforms
from PIL import Image
import os
print("ุงูููุฏ ูุนูู!")

# =============================
# ุฅุนุฏุงุฏ Flask
# =============================
app = Flask(__name__)

# =============================py
# ุฅุนุฏุงุฏ ุงูุชุญูููุงุช ููุตูุฑ
# =============================
preprocess = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406],
                         [0.229, 0.224, 0.225])
])

# =============================
# ุชุญููู ูููุฐุฌ ResNet18 ูู state_dict
# =============================
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# ุฅูุดุงุก ูููุฐุฌ ResNet18 ุฌุฏูุฏ
model = models.resnet18(pretrained=False)

# ุชุนุฏูู ุขุฎุฑ ุทุจูุฉ ูุชุชูุงุณุจ ูุน ุนุฏุฏ ุงููุฆุงุช
num_classes = 3
model.fc = nn.Linear(model.fc.in_features, num_classes)

# ุชุญููู ุงูู state_dict ูููุณ ุงููููุฐุฌ ุจุงููุงูู
state_dict = torch.load("model_conv_state.pth", map_location=device)
model.load_state_dict(state_dict)

# ููู ุงููููุฐุฌ ููุฌูุงุฒ
model.to(device)

# ูุถุน ุงููููุฐุฌ ูู ูุถุน ุงูุชูููู
model.eval()

# =============================
# ูุงุฆูุฉ ุงููุฆุงุช
# =============================
class_names = ["Alhajareen","Alkabir_Mosque" ,"Sultan_Al_Kathiri_Palace"]

# =============================
# ุฏุงูุฉ ุงูุชูุจุค ุจุงููุฆุฉ
# =============================
def predict_image(image_path):
    image = Image.open(image_path).convert('RGB')
    input_tensor = preprocess(image).unsqueeze(0).to(device)
    with torch.no_grad():
        output = model(input_tensor)
        _, pred = torch.max(output, 1)
        class_name = class_names[pred.item()]
    return class_name

# =============================
# ูุนูููุงุช ูุฎุตุตุฉ ููู ูุฆุฉ
# =============================
info_dict = {
    "Alkabir_Mosque": """๐ ุงูุฌุงูุน ุงููุจูุฑ ุจุตูุนุงุก ุงููุฏููุฉ

ุงูุชุฃุณูุณ: ุจููู ูู ุงูุณูุฉ ุงูุณุงุฏุณุฉ ูููุฌุฑุฉ (ุญูุงูู 630ู) ุจุฃูุฑ ูู ุงููุจู ูุญูุฏ ุตูู ุงููู ุนููู ูุณููุ ูููุนุชุจุฑ ุซุงูุซ ูุณุฌุฏ ุจููู ูู ุงูุฅุณูุงู ุจุนุฏ ูุณุฌุฏู ูุจุงุก ูุงููุฏููุฉ ุงููููุฑุฉ.

ุงููููุน: ููุน ูู ููุจ ุตูุนุงุก ุงููุฏููุฉุ ูู ุจูุนุฉ ูุงูุช ุจุณุชุงููุง ุฃูุฏุงู ููู ุตูุนุงุก (ุจุงุฐุงู ุงููุงุฑุณู) ูููุจู ุตูู ุงููู ุนููู ูุณูู.

ุงููุนูุงุฑ: ูุชููุฒ ุจุชุฎุทูุท ูุนูุงุฑู ูุฑูุฏุ ุญูุซ ูุญูุท ุจุงูุฌุงูุน ุฑูุงู ููุดูู ุชุญูุท ุจู ุฃุฑููุฉ ุนูููุฉุ ูููุนุชุจุฑ ูุฆุฐูุชุงู ูู ุฃูุฏู ุงููุขุฐู ูู ุงูุนุงูู ุงูุฅุณูุงูู.

ุงูููุงูุฉ: ููุนุฏ ูุฑูุฒูุง ูุงููุง ููุนูู ูุงูุฏููุ ููุญุชูู ุนูู ููุชุจุฉ ุบููุฉ ุจุงููุฎุทูุทุงุช ุงูุฅุณูุงููุฉ ุงููุฏููุฉ.""",

    "Alhajareen": """๐๏ธ ูุฏููุฉ ุงููุฌุฑูู (ุญุถุฑููุช)

ุงููููุน: ุชูุน ูู ูุงุฏู ุฏูุนู ุจูุญุงูุธุฉ ุญุถุฑููุชุ ุดุฑู ุงููููุ ูุชูุนุฏ ุจูุงุจุฉ ูููุงุฏู.

ุงูุชุงุฑูุฎ: ุชุนูุฏ ุขุซุงุฑูุง ุฅูู ูุง ูุจู ุงููููุงุฏุ ุญูุซ ูุฑุฏ ุงุณููุง ูู ูููุด ูุฏููุฉ ุชุนูุฏ ุฅูู ุงููุฑู ุงูุณุงุจุน ูุจู ุงููููุงุฏ.

ุงููุนุงูู: ุชุชููุฒ ุจูุจุงูููุง ุงูุทูููุฉ ุงูุชูููุฏูุฉ ุงููุชูุงุตูุฉุ ูุฃุณูุงููุง ุงููุฏููุฉุ ููุณุงุฌุฏูุง ุงูุชุงุฑูุฎูุฉุ ูุชูุนุชุจุฑ ูุฑูุฒูุง ูุงููุง ููุซูุงูุฉ ุงูุฅุณูุงููุฉ ูู ุงูููุทูุฉ.

ุงูุทุจูุนุฉ: ุชูุญูุท ุจูุง ุบุงุจุงุช ุงููุฎูู ูุงููุฏูุงู ุงูุฎุตุจุฉุ ููุง ูุฌุนููุง ูุฌูุฉ ุณูุงุญูุฉ ูุงุฏุฆุฉ ููููุฒุฉ.""",

    "Sultan_Al_Kathiri_Palace": """๐ฐ ูุตุฑ ุงูุณูุทุงู ุงููุซูุฑู (ุณูุฆูู)

ุงูุชุฃุณูุณ: ุจููู ูู ุนุงู 814ูู (1411ู) ุนูู ูุฏ ุงูุณูุทุงู ุจุฏุฑ ุฃุจู ุทููุฑู ูู ุณูุงุทูู ุขู ูุซูุฑุ ูุงุณุชุบุฑู ุจูุงุคู 15 ุนุงููุง.

ุงููููุน: ููุน ูู ูุฏููุฉ ุณูุฆูู ุจูุญุงูุธุฉ ุญุถุฑููุชุ ูููุนุฏ ูู ุฃุจุฑุฒ ุงููุนุงูู ุงูุชุงุฑูุฎูุฉ ูู ุงููุงุฏู.

ุงููุนูุงุฑ: ูุชููุฒ ุจุชุตูููู ุงูุฏูุงุนู ูุงูููุฏุณุฉ ุงููุนูุงุฑูุฉ ุงููุฑูุฏุฉุ ุญูุซ ูุงู ููุณุชุฎุฏู ูุญุตู ูุญูุงูุฉ ุงููุฏููุฉ.

ุงูููุงูุฉ: ููุนุชุจุฑ ุฑูุฒูุง ููุณูุทุฉ ูุงูุซูุงูุฉ ูู ุงูุฏููุฉ ุงููุซูุฑูุฉุ ููุถู ุงูุขู ููุงุชุจ ููุฑุน ููุฆุฉ ุงููุชุงุญู ูุงูุขุซุงุฑ ูู ุณูุฆูู."""
}


# =============================
# ูุณุงุฑ ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ
# =============================
@app.route("/", methods=["GET", "POST"])
def index():
    info = ""
    img_path = ""
    if request.method == "POST":
        file = request.files["file"]
        if file:
            # ุฅูุดุงุก ูุฌูุฏ static ุฅุฐุง ูู ููู ููุฌูุฏ
            if not os.path.exists("static"):
                os.makedirs("static")
            
            # ุญูุธ ุงูุตูุฑุฉ
            img_path = os.path.join("static", file.filename)
            file.save(img_path)

            # ุงูุชูุจุค ุจุงููุฆุฉ
            class_name = predict_image(img_path)
            info = info_dict.get(class_name, "ูุง ุชูุฌุฏ ูุนูููุงุช ูุชุงุญุฉ ููุฐู ุงููุฆุฉ.")
    
    return render_template("index.html", img_path=img_path, info=info)

# =============================
# ุชุดุบูู ุงูุณูุฑูุฑ
# =============================
if __name__ == "__main__":
    app.run(debug=True)